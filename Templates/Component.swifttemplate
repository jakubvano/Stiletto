// MARK: - Components
<%
func constructor(for type: Type?) -> String {
    guard let type = type, let method = type.methods.filter({ $0.annotations.keys.contains("Inject") }).first else { return "/* No constructor available */" }
    return type.name + "(" 
        + method.parameters.map { "\($0.name): \(constructor(for: $0.type))" } .joined(separator: ", ") 
        + ")"
}
%>

<% for type in types.protocols where type.annotations.keys.contains("Component") { %>
<% let componentName = "Stiletto" + type.name %>
struct <%= componentName %>: <%= type.name %> {
    static func create() -> <%= componentName %> {
        return <%= componentName %>()
    }

<% for variable in type.variables { %>
    var <%= variable.name %>: <%= variable.typeName %> {
        return <%= constructor(for: variable.type) %>
    }
<% } %>
}
<% } %>
